<?php
namespace frontend\controllers;

use Yii;
use yii\base\InvalidParamException;
use yii\helpers\Url;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;
use frontend\models\PasswordResetRequestForm;
use frontend\models\ResetPasswordForm;
use frontend\models\SignupForm;
use frontend\models\ContactForm;
use yii\web\UploadedFile;
use yii\web\Response;

/**
 * Site controller
 */
class AppController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ]
        ];
    }

    public function beforeAction($action)
    {
        if($action->id != 'profile')
            if(!\frontend\models\Basic_info::check(1))
                $this->redirect(Url::to(['app/profile']));

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function actionIndex()
    {
        return $this->render('index');
    }

    public function actionProfile()
    {
        $psl = (isset($_GET['psl']))? $_GET['psl'] : 'basic';

        if($psl == 'basic'){
            if($model = \frontend\models\Basic_info::findOne(Yii::$app->user->id)){
                if($model->load(Yii::$app->request->post())){
                    if($model->validate() && $model->save()){
                        Yii::$app->session->setFlash('success', Yii::t('app', 'Informacija sėkmingai išsaugota'));
                        return $this->redirect(Url::to(['app/profile', 'psl' => 'foto']));
                    }
                }
            }
        }elseif($psl == 'foto'){
            $model = new \frontend\models\UploadForm;

            if(Yii::$app->request->post()) {
                $model->image = UploadedFile::getInstance($model, 'image');
                if($model->upload()){
                    Yii::$app->session->setFlash('success', Yii::t('app', 'Nuotrauka sėkmingai įkelta'));
                    return $this->redirect(Url::to(['app/profile', 'psl' => 'detail']));
                }else{
                    Yii::$app->session->setFlash('danger', Yii::t('app', 'Nuotraukos įkelti nepavyko'));
                }
            }
        }elseif($psl == 'detail'){
            $model = \frontend\models\Detail_info::prepare();
            $model->preset();

            if($model->load(Yii::$app->request->post())){
                if($model->validate() && $model->save()){
                    Yii::$app->session->setFlash('success', Yii::t('app', 'Informacija sėkmingai išsaugota'));
                    return $this->redirect(Url::to(['app/profile', 'psl' => 'search']));
                }
            }
        }elseif($psl == 'search'){
            $model = \frontend\models\Search_info::prepare();
            $model->preset();

            if($model->load(Yii::$app->request->post())){
                $model->multipleLoad(Yii::$app->request->post());
                if($model->validate() && $model->save()){
                    Yii::$app->session->setFlash('success', Yii::t('app', 'Informacija sėkmingai išsaugota'));
                    return $this->redirect(Url::to(['app/profile', 'psl' => 'search']));
                }
            }
        }
        
        return $this->render('profile', [
            'psl' => $psl,
            'model' => $model
        ]);
    }

    public function actionPopulate()
    {
        \frontend\models\populateCities::populate();
    }

    public function actionUsers()
    {
        $model = \frontend\models\Search_users::prepare();
        

        return $this->render('users', [
            'model' => $model
        ]);
    }

}
